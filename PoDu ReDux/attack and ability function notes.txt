#Accounts for all status effects without separate functions
def applyStatus(targets, statusname):
#statusname not necessary to remove ALL statuses
def removeStatus(targets, *statusname):

#Accounts for all markers and allows new markers without too much adjustment
def applyMarker(targets, markername):
#markername not necessary to remove ALL markers
def removeMarker(targets, *markername):

#Wait effects stack additively
def applyWait(targets, duration):
def removeWait(targets):

#Accounts for reversion effects, i.e. backtrack (celebi, gross)
def evolve(targets):
def devolve(targets):
def originalState(targets):
#probably gonna need a separate timer function for Megas/Ultra Necrozma
def megaEvolve(targets):
#Accounts for Ultra Necrozma
def formChange(targets, duration):

#Allows for single- or multi-targeting
def targetKO(targets):
def targetRemove(targets):
def targetToUltraSpace(targets):
def targetToBoard(targets):
def targetToBench(targets):
def targetToPC(targets):
def targetToOtherPC(targets):
def swapSpot(targets):

#OR
#Summarizes all possible movements into one function with conditionals
def targetMove(targets, eligibleOrigin, eligibleNewLocation, cause):

#Allows for changing of entire wheel (i.e. targetsegments = color in movelist, targetcolor red for terrakion-like effects) or just one segment (ex. X-Speed)
def zmoveWheel():
def changeGold(targets, targetsegments, targetcolor):
def changeWhite(targets, targetsegments, targetcolor):
def changeBlue(targets, targetsegments, targetcolor):
def changePurple(targets, targetsegments, targetcolor):

#haven't decided how to disambiguate between dance effects, fire spins, double chances, etc
def respin(targets):

#Allows for small number of functions that accomodate effects like Infiltrate, Ghost Sensor, Soar, etc in all different ways
def bypassAll(exceptions):
def bypassNone(exceptions):

#most figures will probably have a blockNone(enemy) statement, but undecided on how to make bypass override block in the right ways
def blockAll(exceptions):
def blockNone(exceptions):

#Allows checking of immune list in figure objects for things like status, KO, movement, etc
def immune([KEYWORDS]):

#for "When this is KO'd" effects
def receiveKO(relevantFunctions()):
#considers that all KOs allow evolution
def giveKO(evolve(user), relevantFunctions()):
#not yet sure how to differentiate between Synthesis-like effects and global auras
def changeDamage(targets, amount, *targetsegments, *targetcolor)
def changeStars(targets, amount, *targetsegments)
def changeMove(targets, amount)
#For things like Celesteela Flame Gun, could also cover Z-Moves
def changeAttack(targets, targetsegments, newattack())